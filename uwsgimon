#!/usr/bin/env python
# coding: utf-8

import argparse
import errno
try:
    import simplejson as json
except ImportError:
    import json
import socket
import sys
import textwrap
import time

from collections import defaultdict


def inet_addr(arg):
    sfamily = socket.AF_INET
    host, port = arg.rsplit(':', 1)
    addr = (host, int(port))
    return sfamily, addr, host


def unix_addr(arg):
    sfamily = socket.AF_UNIX
    addr = arg
    return sfamily, addr, socket.gethostname()


def abstract_unix_addr(arg):
    sfamily = socket.AF_UNIX
    addr = '\0' + arg[1:]
    return sfamily, addr, socket.gethostname()


def run(stats, freq, node, f):
    if ':' in stats:
        sfamily, addr, host = inet_addr(stats)
    elif stats.startswith('@'):
        sfamily, addr, host = abstract_unix_addr(stats)
    else:
        sfamily, addr, host = unix_addr(stats)

    # RPS calculation
    first = True
    last_ts = time.time()
    last_req = defaultdict(int)

    while True:
        js = ''
        s = socket.socket(sfamily, socket.SOCK_STREAM)
        try:
            s.connect(addr)
            while True:
                data = s.recv(4096)
                if len(data) < 1:
                    break
                js += data.decode('utf8', 'ignore')
        except IOError as e:
            if e.errno != errno.EINTR:
                raise
            continue
        except:
            raise Exception("unable to get uWSGI statistics")
        finally:
            s.close()

        try:
            dd = json.loads(js)
        except json.JSONDecodeError:
            continue

        if 'workers' not in dd:
            raise Exception("unable to get uWSGI statistics")

        workers = dd['workers']

        result = dict()
        result['ver'] = dd.get('version', 'unknown')
        result['node'] = node
        result['req'] = sum([w['requests'] for w in workers])

        dt = time.time() - last_ts
        for w in workers:
            w['rps'] = int(round((w['requests'] - last_req[w['id']]) / dt))
            last_req[w['id']] = w['requests']
        last_ts = time.time()

        result['rps'] = 0 if first else sum([w['rps'] for w in workers])
        first = False

        result['avg'] = round(sum([w['avg_rt'] for w in workers]) / float(len(workers)) / 1000.0)
        result['lq'] = int(dd.get('listen_queue', 0))
        result['tx'] = sum([w['tx'] for w in workers])

        sys.stdout.write(f.strip().format(**result))
        sys.stdout.write('\n')
        sys.stdout.flush()

        time.sleep(freq)


def main():
    default_format = 'uwsgi,node={node} req={req}i,rps={rps}i,avg={avg},lq={lq}i,tx={tx}i'

    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--node', '-n', dest='node', default=socket.gethostname(), help='uWSGI node name, current hostname by default')
    parser.add_argument('--frequency', '-q', dest='freq', default=1, type=float, help='uWSGI stats refresh frequency, in seconds')
    parser.add_argument('--format', '-f', dest='format', default=default_format,
                        help='''output format, available variables:
    ver  - uWSGI version
    node - uWSGI node name
    req  - total requests
    rps  - requests per second
    avg  - average response time
    lq   - listen queue
    tx   - traffic

e.g. "{}"'''.format(default_format))

    parser.add_argument('stats', help='uWSGI stats address')

    args = parser.parse_args()

    try:
        run(stats=args.stats, freq=args.freq, node=args.node, f=args.format)
    except IOError as e:
        if e.errno == errno.EPIPE:
            sys.exit(0)


import signal
signal.signal(signal.SIGINT, lambda signal, frame: sys.exit(130))


if __name__ == '__main__':
    main()
